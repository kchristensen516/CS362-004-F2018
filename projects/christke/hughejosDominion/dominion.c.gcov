        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:7
        -:    0:Programs:6
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
   105539:    8:int compare(const void* a, const void* b) {
   105539:    9:  if (*(int*)a > *(int*)b)
    52083:   10:    return 1;
    53456:   11:  if (*(int*)a < *(int*)b)
    18572:   12:    return -1;
    34884:   13:  return 0;
        -:   14:}
        -:   15:
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
        7:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;
        -:   43:  //set up random number generator
        7:   44:  SelectStream(1);
        7:   45:  PutSeed((long)randomSeed);
        -:   46:
        -:   47:  //check number of players
        7:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
        7:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
       77:   57:  for (i = 0; i < 10; i++)
        -:   58:    {
      770:   59:      for (j = 0; j < 10; j++)
        -:   60:        {
      700:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
        7:   73:  if (numPlayers == 2)
        -:   74:    {
        7:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
    #####:   77:  else if (numPlayers == 3)
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
        7:   87:  if (numPlayers == 2)
        -:   88:    {
        7:   89:      state->supplyCount[estate] = 8;
        7:   90:      state->supplyCount[duchy] = 8;
        7:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
    #####:   95:      state->supplyCount[estate] = 12;
    #####:   96:      state->supplyCount[duchy] = 12;
    #####:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
        7:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
        7:  102:  state->supplyCount[silver] = 40;
        7:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
      147:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  107:    {
     1155:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  109:	{
     1085:  110:	  if (kingdomCards[j] == i)
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
       70:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  114:		{
       14:  115:		  if (numPlayers == 2){
        7:  116:		    state->supplyCount[i] = 8;
        -:  117:		  }
    #####:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
       63:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
       70:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
     1015:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
       21:  138:  for (i = 0; i < numPlayers; i++)
        -:  139:    {
       14:  140:      state->deckCount[i] = 0;
       56:  141:      for (j = 0; j < 3; j++)
        -:  142:	{
       42:  143:	  state->deck[i][j] = estate;
       42:  144:	  state->deckCount[i]++;
        -:  145:	}
      112:  146:      for (j = 3; j < 10; j++)
        -:  147:	{
       98:  148:	  state->deck[i][j] = copper;
       98:  149:	  state->deckCount[i]++;
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
       21:  154:  for (i = 0; i < numPlayers; i++)
        -:  155:    {
       14:  156:      if ( shuffle(i, state) < 0 )
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
       21:  163:  for (i = 0; i < numPlayers; i++)
        -:  164:    {
        -:  165:      //initialize hand size to zero
       14:  166:      state->handCount[i] = 0;
       14:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:
        -:  175:  //set embargo tokens to 0 for all supply piles
      196:  176:  for (i = 0; i <= treasure_map; i++)
        -:  177:    {
      189:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
        7:  182:  state->outpostPlayed = 0;
        7:  183:  state->phase = 0;
        7:  184:  state->numActions = 1;
        7:  185:  state->numBuys = 1;
        7:  186:  state->playedCardCount = 0;
        7:  187:  state->whoseTurn = 0;
        7:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
       42:  192:  for (it = 0; it < 5; it++){
       35:  193:    drawCard(state->whoseTurn, state);
        -:  194:  }
        -:  195:
        7:  196:  updateCoins(state->whoseTurn, state, 0);
        -:  197:
        7:  198:  return 0;
        -:  199:}
        -:  200:
      130:  201:int shuffle(int player, struct gameState *state) {
        -:  202:
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
      130:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
      130:  209:  if (state->deckCount[player] < 1)
       55:  210:    return -1;
       75:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare);
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
    15491:  214:  while (state->deckCount[player] > 0) {
    15341:  215:    card = floor(Random() * state->deckCount[player]);
    15341:  216:    newDeck[newDeckPos] = state->deck[player][card];
    15341:  217:    newDeckPos++;
  1254562:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
  1239221:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
    15341:  221:    state->deckCount[player]--;
        -:  222:  }
    15416:  223:  for (i = 0; i < newDeckPos; i++) {
    15341:  224:    state->deck[player][i] = newDeck[i];
    15341:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
       75:  228:  return 0;
        -:  229:}
        -:  230:
    #####:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state)
        -:  232:{
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
        -:  250:
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  268:
    #####:  269:  return 0;
        -:  270:}
        -:  271:
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
        -:  291:    if (DEBUG)
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  298:
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:
    #####:  308:  return 0;
        -:  309:}
        -:  310:
    #####:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
        -:  313:}
        -:  314:
    #####:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:  int currentPlayer = whoseTurn(state);
    #####:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
    #####:  320:int supplyCount(int card, struct gameState *state) {
    #####:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
        8:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
        8:  326:  int count = 0;
        -:  327:
     2028:  328:  for (i = 0; i < state->deckCount[player]; i++)
        -:  329:    {
     2020:  330:      if (state->deck[player][i] == card) count++;
        -:  331:    }
        -:  332:
     2018:  333:  for (i = 0; i < state->handCount[player]; i++)
        -:  334:    {
     2010:  335:      if (state->hand[player][i] == card) count++;
        -:  336:    }
        -:  337:
     2008:  338:  for (i = 0; i < state->discardCount[player]; i++)
        -:  339:    {
     2000:  340:      if (state->discard[player][i] == card) count++;
        -:  341:    }
        -:  342:
        8:  343:  return count;
        -:  344:}
        -:  345:
    12013:  346:int whoseTurn(struct gameState *state) {
    12013:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
    #####:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
        -:  354:
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
        -:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
    #####:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:
        -:  394:  //if stack of Province cards is empty, the game ends
    #####:  395:  if (state->supplyCount[province] == 0)
        -:  396:    {
    #####:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
    #####:  401:  j = 0;
    #####:  402:  for (i = 0; i < 25; i++)
        -:  403:    {
    #####:  404:      if (state->supplyCount[i] == 0)
        -:  405:	{
    #####:  406:	  j++;
        -:  407:	}
        -:  408:    }
    #####:  409:  if ( j >= 3)
        -:  410:    {
    #####:  411:      return 1;
        -:  412:    }
        -:  413:
    #####:  414:  return 0;
        -:  415:}
        -:  416:
    #####:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
    34393:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
    34393:  528:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  529:
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
    15265:  533:    for (i = 0; i < state->discardCount[player];i++){
    15201:  534:      state->deck[player][i] = state->discard[player][i];
    15201:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
       64:  538:    state->deckCount[player] = state->discardCount[player];
       64:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
       64:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  543:
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:
       64:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
       64:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:
       64:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
       64:  559:    if (deckCounter == 0)
        3:  560:      return -1;
        -:  561:
       61:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
       61:  563:    state->deckCount[player]--;
       61:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
    34329:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
    34329:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
    34329:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
    34329:  576:    state->deckCount[player]--;
    34329:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
    34390:  580:  return 0;
        -:  581:}
        -:  582:
       29:  583:int getCost(int cardNumber)
        -:  584:{
       29:  585:  switch( cardNumber )
        -:  586:    {
        1:  587:    case curse:
        1:  588:      return 0;
        1:  589:    case estate:
        1:  590:      return 2;
        1:  591:    case duchy:
        1:  592:      return 5;
        1:  593:    case province:
        1:  594:      return 8;
        1:  595:    case copper:
        1:  596:      return 0;
        1:  597:    case silver:
        1:  598:      return 3;
        1:  599:    case gold:
        1:  600:      return 6;
        1:  601:    case adventurer:
        1:  602:      return 6;
        1:  603:    case council_room:
        1:  604:      return 5;
        1:  605:    case feast:
        1:  606:      return 4;
        1:  607:    case gardens:
        1:  608:      return 4;
        1:  609:    case mine:
        1:  610:      return 5;
        1:  611:    case remodel:
        1:  612:      return 4;
        1:  613:    case smithy:
        1:  614:      return 4;
        1:  615:    case village:
        1:  616:      return 3;
        1:  617:    case baron:
        1:  618:      return 4;
        1:  619:    case great_hall:
        1:  620:      return 3;
        1:  621:    case minion:
        1:  622:      return 5;
        1:  623:    case steward:
        1:  624:      return 3;
        1:  625:    case tribute:
        1:  626:      return 5;
        1:  627:    case ambassador:
        1:  628:      return 3;
        1:  629:    case cutpurse:
        1:  630:      return 4;
        1:  631:    case embargo:
        1:  632:      return 2;
        1:  633:    case outpost:
        1:  634:      return 5;
        1:  635:    case salvager:
        1:  636:      return 4;
        1:  637:    case sea_hag:
        1:  638:      return 4;
        1:  639:    case treasure_map:
        1:  640:      return 4;
        -:  641:    }
        -:  642:
        2:  643:  return -1;
        -:  644:}
        -:  645:
     2000:  646:int adventurerEffect(struct gameState *state)
        -:  647:{
     2000:  648:  int drawnTreasure=0;
     2000:  649:  int currentPlayer = whoseTurn(state);
        -:  650:  int tempHand[MAX_HAND];// moved above the if statement
        -:  651:  int cardDrawn;
     2000:  652:  int z = 0;// this is the counter for the temp hand
        -:  653:
    26343:  654:  while(drawnTreasure<2){
        -:  655:/** bug: changed <1 to >=1 so that shuffle occurs even when deck is not empty **/
    22343:  656:    if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
        -:  657:    // if (state->deckCount[currentPlayer] >=1){//if the deck is empty we need to shuffle discard and add to deck
       52:  658:      shuffle(currentPlayer, state);
        -:  659:    }
    22343:  660:    drawCard(currentPlayer, state);
    22343:  661:    cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
    22343:  662:    if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold) {
     4000:  663:      drawnTreasure++;
        -:  664:    }
        -:  665:    else {
    18343:  666:      tempHand[z]=cardDrawn;
    18343:  667:      state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    18343:  668:      z++;
        -:  669:    }
        -:  670:  }
    22343:  671:  while(z-1>=0){
    18343:  672:    state->discard[currentPlayer][state->discardCount[currentPlayer]++]=tempHand[z-1]; // discard all cards in play that have been drawn
    18343:  673:    z=z-1;
        -:  674:  }
     2000:  675:  return 0;
        -:  676:}
        -:  677:
        -:  678:
    #####:  679:int councilRoomEffect(struct gameState *state, int handPos)
        -:  680:{
    #####:  681:  int currentPlayer = whoseTurn(state);
        -:  682:  //+4 Cards
        -:  683:
        -:  684:  int i;
    #####:  685:  for (i = 0; i < 4; i++) {
    #####:  686:    drawCard(currentPlayer, state);
        -:  687:  }
        -:  688:
        -:  689:  //+1 Buy
    #####:  690:  state->numBuys++;
        -:  691:
        -:  692:  //Each other player draws a card
    #####:  693:  for (i = 0; i < state->numPlayers; i++) {
    #####:  694:    if ( i != currentPlayer ) {
    #####:  695:      drawCard(i, state);
        -:  696:    }
        -:  697:  }
        -:  698:
        -:  699:  //put played card in played card pile
    #####:  700:  discardCard(handPos, currentPlayer, state, 0);
        -:  701:
    #####:  702:  return 0;
        -:  703:}
        -:  704:
    #####:  705:int feastEffect(struct gameState *state, int handPos, int choice)
        -:  706:{
    #####:  707:  int currentPlayer = whoseTurn(state);
        -:  708:  int tempHand[MAX_HAND];// moved above the if statement
        -:  709:  int i;
        -:  710:  int x;
        -:  711:  //gain card with cost up to 5
        -:  712:  //Backup hand
    #####:  713:  for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  714:    tempHand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  715:    state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  716:  }
        -:  717:  //Backup hand
        -:  718:
        -:  719:  //Update Coins for Buy
    #####:  720:  updateCoins(currentPlayer, state, 5);
    #####:  721:  x = 1;//Condition to loop on
        -:  722:  // x = 0;//Condition to loop on   #BUG
    #####:  723:  while( x == 1) {//Buy one card
    #####:  724:    if (supplyCount(choice, state) <= 0){
        -:  725:      if (DEBUG) {
        -:  726:        printf("None of that card left, sorry!\n");
        -:  727:      }
        -:  728:
        -:  729:      if (DEBUG){
        -:  730:        printf("Cards Left: %d\n", supplyCount(choice, state));
        -:  731:      }
        -:  732:    }
    #####:  733:    else if (state->coins < getCost(choice)){
    #####:  734:      printf("That card is too expensive!\n");
        -:  735:
        -:  736:      if (DEBUG){
        -:  737:        printf("Coins: %d < %d\n", state->coins, getCost(choice));
        -:  738:      }
        -:  739:    }
        -:  740:    else {
        -:  741:      if (DEBUG){
        -:  742:        printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  743:      }
        -:  744:
    #####:  745:      gainCard(choice, state, 0, currentPlayer);//Gain the card
    #####:  746:      x = 0;//No more buying cards
        -:  747:
        -:  748:      if (DEBUG){
        -:  749:        printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  750:      }
        -:  751:
        -:  752:    }
        -:  753:  }
        -:  754:
        -:  755:  //Reset Hand
    #####:  756:  for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  757:    state->hand[currentPlayer][i] = tempHand[i];
    #####:  758:    tempHand[i] = -1;
        -:  759:  }
        -:  760:  //Reset Hand
        -:  761:
    #####:  762:  return 0;
        -:  763:}
        -:  764:
        -:  765:
    #####:  766:int mineEffect(struct gameState *state, int handPos, int choice1, int choice2)
        -:  767:{
    #####:  768:  int currentPlayer = whoseTurn(state);
    #####:  769:  int j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  770:
    #####:  771:  if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold ||
    #####:  772:    choice2 > treasure_map || choice2 < curse ||
    #####:  773:    (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) ) {
        -:  774:
    #####:  775:    return -1;
        -:  776:  }
        -:  777:
    #####:  778:  gainCard(choice2, state, 2, currentPlayer);
        -:  779:
        -:  780:  //discard card from hand
    #####:  781:  discardCard(handPos, currentPlayer, state, 0);
        -:  782:
        -:  783:  //discard trashed card
        -:  784:  int i;
        -:  785:
    #####:  786:  for (i = 0; i < state->handCount[currentPlayer]; i++) {
    #####:  787:    if (state->hand[currentPlayer][i] == j) {
    #####:  788:      discardCard(i, currentPlayer, state, 0);
    #####:  789:      break;
        -:  790:    }
        -:  791:  }
    #####:  792:  return 0;
        -:  793:}
        -:  794:
    #####:  795:int remodelEffect(struct gameState *state, int handPos, int choice1, int choice2)
        -:  796:{
    #####:  797:  int currentPlayer = whoseTurn(state);
    #####:  798:  int j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  799:
    #####:  800:  if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) ) {
    #####:  801:    return -1;
        -:  802:  }
        -:  803:
        -:  804:/** bug: commented out gainCard  **/
        -:  805://  gainCard(choice2, state, 0, currentPlayer);
        -:  806:
        -:  807:  //discard card from hand
    #####:  808:  discardCard(handPos, currentPlayer, state, 0);
        -:  809:
        -:  810:  //discard trashed card
        -:  811:  int i;
    #####:  812:  for (i = 0; i < state->handCount[currentPlayer]; i++) {
    #####:  813:    if (state->hand[currentPlayer][i] == j) {
    #####:  814:      discardCard(i, currentPlayer, state, 0);
    #####:  815:      break;
        -:  816:    }
        -:  817:  }
        -:  818:
    #####:  819:  return 0;
        -:  820:}
        -:  821:
        -:  822:
     4005:  823:int smithyEffect(struct gameState *state, int handPos)
        -:  824:{
     4005:  825:  int currentPlayer = whoseTurn(state);
        -:  826:  //+3 Cards
        -:  827:  int i;
    16020:  828:  for (i = 0; i < 3; i++)
        -:  829:    {
    12015:  830:      drawCard(currentPlayer, state);
        -:  831:    }
        -:  832:
        -:  833:  //discard card from hand
        -:  834:/** bug: commented out discardCard  **/
     4005:  835:  discardCard(handPos, currentPlayer, state, 0);
     4005:  836:  return 0;
        -:  837:}
        -:  838:
        -:  839:
     6005:  840:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  841:{
        -:  842:  int i;
        -:  843:  int j;
        -:  844:  int k;
        -:  845://  int x;
        -:  846:  int index;
     6005:  847:  int currentPlayer = whoseTurn(state);
     6005:  848:  int nextPlayer = currentPlayer + 1;
        -:  849:
     6005:  850:  int tributeRevealedCards[2] = {-1, -1};
        -:  851://  int temphand[MAX_HAND];// moved above the if statement
        -:  852://  int drawntreasure=0;
        -:  853://  int cardDrawn;
        -:  854://  int z = 0;// this is the counter for the temp hand
     6005:  855:  if (nextPlayer > (state->numPlayers - 1)){
     2215:  856:    nextPlayer = 0;
        -:  857:  }
        -:  858:
        -:  859:
        -:  860:  //uses switch to select card and perform actions
     6005:  861:  switch( card )
        -:  862:    {
     2000:  863:    case adventurer:
     2000:  864:      return adventurerEffect(state);
        -:  865:
    #####:  866:    case council_room:
    #####:  867:      return councilRoomEffect(state, handPos);
        -:  868:
    #####:  869:    case feast:
    #####:  870:      return feastEffect(state, handPos, choice1);
        -:  871:
    #####:  872:    case gardens:
    #####:  873:      return -1;
        -:  874:
    #####:  875:    case mine:
    #####:  876:      return mineEffect(state, handPos, choice1, choice2);
        -:  877:
    #####:  878:    case remodel:
    #####:  879:      return remodelEffect(state, handPos, choice1, choice2);
        -:  880:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  881:
        -:  882:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  883:	{
        -:  884:	  return -1;
        -:  885:	}
        -:  886:
        -:  887:      gainCard(choice2, state, 0, currentPlayer);
        -:  888:
        -:  889:      //discard card from hand
        -:  890:      discardCard(handPos, currentPlayer, state, 0);
        -:  891:
        -:  892:      //discard trashed card
        -:  893:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  894:	{
        -:  895:	  if (state->hand[currentPlayer][i] == j)
        -:  896:	    {
        -:  897:	      discardCard(i, currentPlayer, state, 0);
        -:  898:	      break;
        -:  899:	    }
        -:  900:	}
        -:  901:
        -:  902:
        -:  903:      return 0;
        -:  904:
     4005:  905:    case smithy:
     4005:  906:        return smithyEffect(state, handPos);
        -:  907:
    #####:  908:    case village:
        -:  909:      //+1 Card
    #####:  910:      drawCard(currentPlayer, state);
        -:  911:
        -:  912:      //+2 Actions
    #####:  913:      state->numActions = state->numActions + 2;
        -:  914:
        -:  915:      //discard played card from hand
    #####:  916:      discardCard(handPos, currentPlayer, state, 0);
    #####:  917:      return 0;
        -:  918:
    #####:  919:    case baron:
    #####:  920:      state->numBuys++;//Increase buys by 1!
    #####:  921:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  922:	int p = 0;//Iterator for hand!
    #####:  923:	int card_not_discarded = 1;//Flag for discard set!
    #####:  924:	while(card_not_discarded){
    #####:  925:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  926:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  927:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  928:	    state->discardCount[currentPlayer]++;
    #####:  929:	    for (;p < state->handCount[currentPlayer]; p++){
    #####:  930:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  931:	    }
    #####:  932:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  933:	    state->handCount[currentPlayer]--;
    #####:  934:	    card_not_discarded = 0;//Exit the loop
        -:  935:	  }
    #####:  936:	  else if (p > state->handCount[currentPlayer]){
        -:  937:	    if(DEBUG) {
        -:  938:	      printf("No estate cards in your hand, invalid choice\n");
        -:  939:	      printf("Must gain an estate if there are any\n");
        -:  940:	    }
    #####:  941:	    if (supplyCount(estate, state) > 0){
    #####:  942:	      gainCard(estate, state, 0, currentPlayer);
    #####:  943:	      state->supplyCount[estate]--;//Decrement estates
    #####:  944:	      if (supplyCount(estate, state) == 0){
    #####:  945:		isGameOver(state);
        -:  946:	      }
        -:  947:	    }
    #####:  948:	    card_not_discarded = 0;//Exit the loop
        -:  949:	  }
        -:  950:
        -:  951:	  else{
    #####:  952:	    p++;//Next card
        -:  953:	  }
        -:  954:	}
        -:  955:      }
        -:  956:
        -:  957:      else{
    #####:  958:	if (supplyCount(estate, state) > 0){
    #####:  959:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  960:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  961:	  if (supplyCount(estate, state) == 0){
    #####:  962:	    isGameOver(state);
        -:  963:	  }
        -:  964:	}
        -:  965:      }
        -:  966:
        -:  967:
    #####:  968:      return 0;
        -:  969:
    #####:  970:    case great_hall:
        -:  971:      //+1 Card
    #####:  972:      drawCard(currentPlayer, state);
        -:  973:
        -:  974:      //+1 Actions
    #####:  975:      state->numActions++;
        -:  976:
        -:  977:      //discard card from hand
    #####:  978:      discardCard(handPos, currentPlayer, state, 0);
    #####:  979:      return 0;
        -:  980:
    #####:  981:    case minion:
        -:  982:      //+1 action
    #####:  983:      state->numActions++;
        -:  984:
        -:  985:      //discard card from hand
    #####:  986:      discardCard(handPos, currentPlayer, state, 0);
        -:  987:
    #####:  988:      if (choice1)		//+2 coins
        -:  989:	{
    #####:  990:	  state->coins = state->coins + 2;
        -:  991:	}
        -:  992:
    #####:  993:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  994:	{
        -:  995:	  //discard hand
    #####:  996:	  while(numHandCards(state) > 0)
        -:  997:	    {
    #####:  998:	      discardCard(handPos, currentPlayer, state, 0);
        -:  999:	    }
        -: 1000:
        -: 1001:	  //draw 4
    #####: 1002:	  for (i = 0; i < 4; i++)
        -: 1003:	    {
    #####: 1004:	      drawCard(currentPlayer, state);
        -: 1005:	    }
        -: 1006:
        -: 1007:	  //other players discard hand and redraw if hand size > 4
    #####: 1008:	  for (i = 0; i < state->numPlayers; i++)
        -: 1009:	    {
    #####: 1010:	      if (i != currentPlayer)
        -: 1011:		{
    #####: 1012:		  if ( state->handCount[i] > 4 )
        -: 1013:		    {
        -: 1014:		      //discard hand
    #####: 1015:		      while( state->handCount[i] > 0 )
        -: 1016:			{
    #####: 1017:			  discardCard(handPos, i, state, 0);
        -: 1018:			}
        -: 1019:
        -: 1020:		      //draw 4
    #####: 1021:		      for (j = 0; j < 4; j++)
        -: 1022:			{
    #####: 1023:			  drawCard(i, state);
        -: 1024:			}
        -: 1025:		    }
        -: 1026:		}
        -: 1027:	    }
        -: 1028:
        -: 1029:	}
    #####: 1030:      return 0;
        -: 1031:
    #####: 1032:    case steward:
    #####: 1033:      if (choice1 == 1)
        -: 1034:	{
        -: 1035:	  //+2 cards
    #####: 1036:	  drawCard(currentPlayer, state);
    #####: 1037:	  drawCard(currentPlayer, state);
        -: 1038:	}
    #####: 1039:      else if (choice1 == 2)
        -: 1040:	{
        -: 1041:	  //+2 coins
    #####: 1042:	  state->coins = state->coins + 2;
        -: 1043:	}
        -: 1044:      else
        -: 1045:	{
        -: 1046:	  //trash 2 cards in hand
    #####: 1047:	  discardCard(choice2, currentPlayer, state, 1);
    #####: 1048:	  discardCard(choice3, currentPlayer, state, 1);
        -: 1049:	}
        -: 1050:
        -: 1051:      //discard card from hand
    #####: 1052:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1053:      return 0;
        -: 1054:
    #####: 1055:    case tribute:
    #####: 1056:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####: 1057:	if (state->deckCount[nextPlayer] > 0){
    #####: 1058:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1059:	  state->deckCount[nextPlayer]--;
        -: 1060:	}
    #####: 1061:	else if (state->discardCount[nextPlayer] > 0){
    #####: 1062:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1063:	  state->discardCount[nextPlayer]--;
        -: 1064:	}
        -: 1065:	else{
        -: 1066:	  //No Card to Reveal
        -: 1067:	  if (DEBUG){
        -: 1068:	    printf("No cards to reveal\n");
        -: 1069:	  }
        -: 1070:	}
        -: 1071:      }
        -: 1072:
        -: 1073:      else{
    #####: 1074:	if (state->deckCount[nextPlayer] == 0){
    #####: 1075:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####: 1076:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1077:	    state->deckCount[nextPlayer]++;
    #####: 1078:	    state->discard[nextPlayer][i] = -1;
    #####: 1079:	    state->discardCount[nextPlayer]--;
        -: 1080:	  }
        -: 1081:
    #####: 1082:	  shuffle(nextPlayer,state);//Shuffle the deck
        -: 1083:	}
    #####: 1084:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1085:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1086:	state->deckCount[nextPlayer]--;
    #####: 1087:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1088:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1089:	state->deckCount[nextPlayer]--;
        -: 1090:      }
        -: 1091:
    #####: 1092:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one
    #####: 1093:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1094:	state->playedCardCount++;
    #####: 1095:	tributeRevealedCards[1] = -1;
        -: 1096:      }
        -: 1097:
    #####: 1098:      for (i = 0; i <= 2; i ++){
    #####: 1099:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####: 1100:	  state->coins += 2;
        -: 1101:	}
        -: 1102:
    #####: 1103:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####: 1104:	  drawCard(currentPlayer, state);
    #####: 1105:	  drawCard(currentPlayer, state);
        -: 1106:	}
        -: 1107:	else{//Action Card
    #####: 1108:	  state->numActions = state->numActions + 2;
        -: 1109:	}
        -: 1110:      }
        -: 1111:
    #####: 1112:      return 0;
        -: 1113:
    #####: 1114:    case ambassador:
    #####: 1115:      j = 0;		//used to check if player has enough cards to discard
        -: 1116:
    #####: 1117:      if (choice2 > 2 || choice2 < 0)
        -: 1118:	{
    #####: 1119:	  return -1;
        -: 1120:	}
        -: 1121:
    #####: 1122:      if (choice1 == handPos)
        -: 1123:	{
    #####: 1124:	  return -1;
        -: 1125:	}
        -: 1126:
    #####: 1127:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1128:	{
    #####: 1129:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1130:	    {
    #####: 1131:	      j++;
        -: 1132:	    }
        -: 1133:	}
    #####: 1134:      if (j < choice2)
        -: 1135:	{
    #####: 1136:	  return -1;
        -: 1137:	}
        -: 1138:
        -: 1139:      if (DEBUG)
        -: 1140:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1141:
        -: 1142:      //increase supply count for choosen card by amount being discarded
    #####: 1143:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1144:
        -: 1145:      //each other player gains a copy of revealed card
    #####: 1146:      for (i = 0; i < state->numPlayers; i++)
        -: 1147:	{
    #####: 1148:	  if (i != currentPlayer)
        -: 1149:	    {
    #####: 1150:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1151:	    }
        -: 1152:	}
        -: 1153:
        -: 1154:      //discard played card from hand
    #####: 1155:      discardCard(handPos, currentPlayer, state, 0);
        -: 1156:
        -: 1157:      //trash copies of cards returned to supply
    #####: 1158:      for (j = 0; j < choice2; j++)
        -: 1159:	{
    #####: 1160:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1161:	    {
    #####: 1162:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1163:		{
    #####: 1164:		  discardCard(i, currentPlayer, state, 1);
    #####: 1165:		  break;
        -: 1166:		}
        -: 1167:	    }
        -: 1168:	}
        -: 1169:
    #####: 1170:      return 0;
        -: 1171:
    #####: 1172:    case cutpurse:
        -: 1173:
    #####: 1174:      updateCoins(currentPlayer, state, 2);
    #####: 1175:      for (i = 0; i < state->numPlayers; i++)
        -: 1176:	{
    #####: 1177:	  if (i != currentPlayer)
        -: 1178:	    {
    #####: 1179:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1180:		{
    #####: 1181:		  if (state->hand[i][j] == copper)
        -: 1182:		    {
    #####: 1183:		      discardCard(j, i, state, 0);
    #####: 1184:		      break;
        -: 1185:		    }
    #####: 1186:		  if (j == state->handCount[i])
        -: 1187:		    {
    #####: 1188:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1189:			{
        -: 1190:			  if (DEBUG)
        -: 1191:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1192:			}
    #####: 1193:		      break;
        -: 1194:		    }
        -: 1195:		}
        -: 1196:
        -: 1197:	    }
        -: 1198:
        -: 1199:	}
        -: 1200:
        -: 1201:      //discard played card from hand
    #####: 1202:      discardCard(handPos, currentPlayer, state, 0);
        -: 1203:
    #####: 1204:      return 0;
        -: 1205:
        -: 1206:
    #####: 1207:    case embargo:
        -: 1208:      //+2 Coins
    #####: 1209:      state->coins = state->coins + 2;
        -: 1210:
        -: 1211:      //see if selected pile is in play
    #####: 1212:      if ( state->supplyCount[choice1] == -1 )
        -: 1213:	{
    #####: 1214:	  return -1;
        -: 1215:	}
        -: 1216:
        -: 1217:      //add embargo token to selected supply pile
    #####: 1218:      state->embargoTokens[choice1]++;
        -: 1219:
        -: 1220:      //trash card
    #####: 1221:      discardCard(handPos, currentPlayer, state, 1);
    #####: 1222:      return 0;
        -: 1223:
    #####: 1224:    case outpost:
        -: 1225:      //set outpost flag
    #####: 1226:      state->outpostPlayed++;
        -: 1227:
        -: 1228:      //discard card
    #####: 1229:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1230:      return 0;
        -: 1231:
    #####: 1232:    case salvager:
        -: 1233:      //+1 buy
    #####: 1234:      state->numBuys++;
        -: 1235:
    #####: 1236:      if (choice1)
        -: 1237:	{
        -: 1238:	  //gain coins equal to trashed card
    #####: 1239:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1240:	  //trash card
    #####: 1241:	  discardCard(choice1, currentPlayer, state, 1);
        -: 1242:	}
        -: 1243:
        -: 1244:      //discard card
    #####: 1245:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1246:      return 0;
        -: 1247:
    #####: 1248:    case sea_hag:
    #####: 1249:      for (i = 0; i < state->numPlayers; i++){
    #####: 1250:	if (i != currentPlayer){
    #####: 1251:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1252:	  state->discardCount[i]++;
    #####: 1253:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1254:	}
        -: 1255:      }
    #####: 1256:      return 0;
        -: 1257:
    #####: 1258:    case treasure_map:
        -: 1259:      //search hand for another treasure_map
    #####: 1260:      index = -1;
    #####: 1261:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1262:	{
    #####: 1263:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1264:	    {
    #####: 1265:	      index = i;
    #####: 1266:	      break;
        -: 1267:	    }
        -: 1268:	}
    #####: 1269:      if (index > -1)
        -: 1270:	{
        -: 1271:	  //trash both treasure cards
    #####: 1272:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1273:	  discardCard(index, currentPlayer, state, 1);
        -: 1274:
        -: 1275:	  //gain 4 Gold cards
    #####: 1276:	  for (i = 0; i < 4; i++)
        -: 1277:	    {
    #####: 1278:	      gainCard(gold, state, 1, currentPlayer);
        -: 1279:	    }
        -: 1280:
        -: 1281:	  //return success
    #####: 1282:	  return 1;
        -: 1283:	}
        -: 1284:
        -: 1285:      //no second treasure_map found in hand
    #####: 1286:      return -1;
        -: 1287:    }
        -: 1288:
    #####: 1289:  return -1;
        -: 1290:}
        -: 1291:
     4005: 1292:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1293:{
        -: 1294:
        -: 1295:  //if card is not trashed, added to Played pile
     4005: 1296:  if (trashFlag < 1)
        -: 1297:    {
        -: 1298:      //add card to played pile
     4005: 1299:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos];
     4005: 1300:      state->playedCardCount++;
        -: 1301:    }
        -: 1302:
        -: 1303:  //set played card to -1
     4005: 1304:  state->hand[currentPlayer][handPos] = -1;
        -: 1305:
        -: 1306:  //remove card from player's hand
     4005: 1307:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1308:    {
        -: 1309:      //reduce number of cards in hand
    #####: 1310:      state->handCount[currentPlayer]--;
        -: 1311:    }
     4005: 1312:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1313:    {
        -: 1314:      //reduce number of cards in hand
    #####: 1315:      state->handCount[currentPlayer]--;
        -: 1316:    }
        -: 1317:  else
        -: 1318:    {
        -: 1319:      //replace discarded card with last card in hand
     4005: 1320:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1321:      //set last card to -1
     4005: 1322:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1323:      //reduce number of cards in hand
     4005: 1324:      state->handCount[currentPlayer]--;
        -: 1325:    }
        -: 1326:
     4005: 1327:  return 0;
        -: 1328:}
        -: 1329:
    #####: 1330:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1331:{
        -: 1332:  //Note: supplyPos is enum of choosen card
        -: 1333:
        -: 1334:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1335:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1336:    {
    #####: 1337:      return -1;
        -: 1338:    }
        -: 1339:
        -: 1340:  //added card for [whoseTurn] current player:
        -: 1341:  // toFlag = 0 : add to discard
        -: 1342:  // toFlag = 1 : add to deck
        -: 1343:  // toFlag = 2 : add to hand
        -: 1344:
    #####: 1345:  if (toFlag == 1)
        -: 1346:    {
    #####: 1347:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1348:      state->deckCount[player]++;
        -: 1349:    }
    #####: 1350:  else if (toFlag == 2)
        -: 1351:    {
    #####: 1352:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1353:      state->handCount[player]++;
        -: 1354:    }
        -: 1355:  else
        -: 1356:    {
    #####: 1357:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1358:      state->discardCount[player]++;
        -: 1359:    }
        -: 1360:
        -: 1361:  //decrease number in supply pile
    #####: 1362:  state->supplyCount[supplyPos]--;
        -: 1363:
    #####: 1364:  return 0;
        -: 1365:}
        -: 1366:
        7: 1367:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1368:{
        -: 1369:  int i;
        -: 1370:
        -: 1371:  //reset coin count
        7: 1372:  state->coins = 0;
        -: 1373:
        -: 1374:  //add coins for each Treasure card in player's hand
       42: 1375:  for (i = 0; i < state->handCount[player]; i++)
        -: 1376:    {
       35: 1377:      if (state->hand[player][i] == copper)
        -: 1378:	{
       28: 1379:	  state->coins += 1;
        -: 1380:	}
        7: 1381:      else if (state->hand[player][i] == silver)
        -: 1382:	{
    #####: 1383:	  state->coins += 2;
        -: 1384:	}
        7: 1385:      else if (state->hand[player][i] == gold)
        -: 1386:	{
    #####: 1387:	  state->coins += 3;
        -: 1388:	}
        -: 1389:    }
        -: 1390:
        -: 1391:  //add bonus
        7: 1392:  state->coins += bonus;
        -: 1393:
        7: 1394:  return 0;
        -: 1395:}
        -: 1396:
        -: 1397:
        -: 1398://end of dominion.c
