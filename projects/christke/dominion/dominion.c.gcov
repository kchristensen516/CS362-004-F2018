        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:8
        -:    0:Programs:4
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
      424:    8:int compare(const void* a, const void* b) {
      424:    9:  if (*(int*)a > *(int*)b)
    #####:   10:    return 1;
      424:   11:  if (*(int*)a < *(int*)b)
      116:   12:    return -1;
      308:   13:  return 0;
        -:   14:}
        -:   15:
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
       14:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;
        -:   43:  //set up random number generator
       14:   44:  SelectStream(1);
       14:   45:  PutSeed((long)randomSeed);
        -:   46:
        -:   47:  //check number of players
       14:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
       14:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
      154:   57:  for (i = 0; i < 10; i++)
        -:   58:    {
     1540:   59:      for (j = 0; j < 10; j++)
        -:   60:        {
     1400:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
       14:   73:  if (numPlayers == 2)
        -:   74:    {
       14:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
    #####:   77:  else if (numPlayers == 3)
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
       14:   87:  if (numPlayers == 2)
        -:   88:    {
       14:   89:      state->supplyCount[estate] = 8;
       14:   90:      state->supplyCount[duchy] = 8;
       14:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
    #####:   95:      state->supplyCount[estate] = 12;
    #####:   96:      state->supplyCount[duchy] = 12;
    #####:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
       14:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
       14:  102:  state->supplyCount[silver] = 40;
       14:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
      294:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  107:    {
     2310:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  109:	{
     2170:  110:	  if (kingdomCards[j] == i)
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
      140:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  114:		{
       28:  115:		  if (numPlayers == 2){
       14:  116:		    state->supplyCount[i] = 8;
        -:  117:		  }
    #####:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
      126:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
      140:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
     2030:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
       42:  138:  for (i = 0; i < numPlayers; i++)
        -:  139:    {
       28:  140:      state->deckCount[i] = 0;
      112:  141:      for (j = 0; j < 3; j++)
        -:  142:	{
       84:  143:	  state->deck[i][j] = estate;
       84:  144:	  state->deckCount[i]++;
        -:  145:	}
      224:  146:      for (j = 3; j < 10; j++)
        -:  147:	{
      196:  148:	  state->deck[i][j] = copper;
      196:  149:	  state->deckCount[i]++;
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
       42:  154:  for (i = 0; i < numPlayers; i++)
        -:  155:    {
       28:  156:      if ( shuffle(i, state) < 0 )
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
       42:  163:  for (i = 0; i < numPlayers; i++)
        -:  164:    {
        -:  165:      //initialize hand size to zero
       28:  166:      state->handCount[i] = 0;
       28:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:
        -:  175:  //set embargo tokens to 0 for all supply piles
      392:  176:  for (i = 0; i <= treasure_map; i++)
        -:  177:    {
      378:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
       14:  182:  state->outpostPlayed = 0;
       14:  183:  state->phase = 0;
       14:  184:  state->numActions = 1;
       14:  185:  state->numBuys = 1;
       14:  186:  state->playedCardCount = 0;
       14:  187:  state->whoseTurn = 0;
       14:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
       84:  192:  for (it = 0; it < 5; it++){
       70:  193:    drawCard(state->whoseTurn, state);
        -:  194:  }
        -:  195:
       14:  196:  updateCoins(state->whoseTurn, state, 0);
        -:  197:
       14:  198:  return 0;
        -:  199:}
        -:  200:
       32:  201:int shuffle(int player, struct gameState *state) {
        -:  202:
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
       32:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
       32:  209:  if (state->deckCount[player] < 1)
        2:  210:    return -1;
       30:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare);
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
      346:  214:  while (state->deckCount[player] > 0) {
      286:  215:    card = floor(Random() * state->deckCount[player]);
      286:  216:    newDeck[newDeckPos] = state->deck[player][card];
      286:  217:    newDeckPos++;
      992:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
      706:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
      286:  221:    state->deckCount[player]--;
        -:  222:  }
      316:  223:  for (i = 0; i < newDeckPos; i++) {
      286:  224:    state->deck[player][i] = newDeck[i];
      286:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
       30:  228:  return 0;
        -:  229:}
        -:  230:
    #####:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state)
        -:  232:{
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
        -:  250:
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  268:
    #####:  269:  return 0;
        -:  270:}
        -:  271:
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
        -:  291:    if (DEBUG)
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  298:
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:
    #####:  308:  return 0;
        -:  309:}
        -:  310:
    #####:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
        -:  313:}
        -:  314:
    #####:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:  int currentPlayer = whoseTurn(state);
    #####:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
    #####:  320:int supplyCount(int card, struct gameState *state) {
    #####:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
       16:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
       16:  326:  int count = 0;
        -:  327:
     4056:  328:  for (i = 0; i < state->deckCount[player]; i++)
        -:  329:    {
     4040:  330:      if (state->deck[player][i] == card) count++;
        -:  331:    }
        -:  332:
     4036:  333:  for (i = 0; i < state->handCount[player]; i++)
        -:  334:    {
     4020:  335:      if (state->hand[player][i] == card) count++;
        -:  336:    }
        -:  337:
     4016:  338:  for (i = 0; i < state->discardCount[player]; i++)
        -:  339:    {
     4000:  340:      if (state->discard[player][i] == card) count++;
        -:  341:    }
        -:  342:
       16:  343:  return count;
        -:  344:}
        -:  345:
       26:  346:int whoseTurn(struct gameState *state) {
       26:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
    #####:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
        -:  354:
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
        -:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
    #####:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:
        -:  394:  //if stack of Province cards is empty, the game ends
    #####:  395:  if (state->supplyCount[province] == 0)
        -:  396:    {
    #####:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
    #####:  401:  j = 0;
    #####:  402:  for (i = 0; i < 25; i++)
        -:  403:    {
    #####:  404:      if (state->supplyCount[i] == 0)
        -:  405:	{
    #####:  406:	  j++;
        -:  407:	}
        -:  408:    }
    #####:  409:  if ( j >= 3)
        -:  410:    {
    #####:  411:      return 1;
        -:  412:    }
        -:  413:
    #####:  414:  return 0;
        -:  415:}
        -:  416:
    #####:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
      100:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
      100:  528:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  529:
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
       10:  533:    for (i = 0; i < state->discardCount[player];i++){
        6:  534:      state->deck[player][i] = state->discard[player][i];
        6:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
        4:  538:    state->deckCount[player] = state->discardCount[player];
        4:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
        4:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  543:
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:
        4:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
        4:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:
        4:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
        4:  559:    if (deckCounter == 0)
        2:  560:      return -1;
        -:  561:
        2:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
        2:  563:    state->deckCount[player]--;
        2:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
       96:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
       96:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
       96:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
       96:  576:    state->deckCount[player]--;
       96:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
       98:  580:  return 0;
        -:  581:}
        -:  582:
       58:  583:int getCost(int cardNumber)
        -:  584:{
       58:  585:  switch( cardNumber )
        -:  586:    {
        2:  587:    case curse:
        2:  588:      return 0;
        2:  589:    case estate:
        2:  590:      return 2;
        2:  591:    case duchy:
        2:  592:      return 5;
        2:  593:    case province:
        2:  594:      return 8;
        2:  595:    case copper:
        2:  596:      return 0;
        2:  597:    case silver:
        2:  598:      return 3;
        2:  599:    case gold:
        2:  600:      return 6;
        2:  601:    case adventurer:
        2:  602:      return 6;
        2:  603:    case council_room:
        2:  604:      return 5;
        2:  605:    case feast:
        2:  606:      return 4;
        2:  607:    case gardens:
        2:  608:      return 4;
        2:  609:    case mine:
        2:  610:      return 5;
        2:  611:    case remodel:
        2:  612:      return 4;
        2:  613:    case smithy:
        2:  614:      return 4;
        2:  615:    case village:
        2:  616:      return 3;
        2:  617:    case baron:
        2:  618:      return 4;
        2:  619:    case great_hall:
        2:  620:      return 3;
        2:  621:    case minion:
        2:  622:      return 5;
        2:  623:    case steward:
        2:  624:      return 3;
        2:  625:    case tribute:
        2:  626:      return 5;
        2:  627:    case ambassador:
        2:  628:      return 3;
        2:  629:    case cutpurse:
        2:  630:      return 4;
        2:  631:    case embargo:
        2:  632:      return 2;
        2:  633:    case outpost:
        2:  634:      return 5;
        2:  635:    case salvager:
        2:  636:      return 4;
        2:  637:    case sea_hag:
        2:  638:      return 4;
        2:  639:    case treasure_map:
        2:  640:      return 4;
        -:  641:    }
        -:  642:
        4:  643:  return -1;
        -:  644:}
        -:  645:
    #####:  646:int cardEffect_adventurer(struct gameState *state)
        -:  647:{
    #####:  648:  int z = 0;
    #####:  649:  int currentPlayer = whoseTurn(state);
        -:  650:  int temphand[MAX_HAND];
    #####:  651:  int drawntreasure=0;
        -:  652:  // int drawntreasure;    //BUG
        -:  653:  int cardDrawn;
        -:  654:
    #####:  655:  while(drawntreasure<2){
    #####:  656:    if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
    #####:  657:      shuffle(currentPlayer, state);
        -:  658:    }
    #####:  659:    drawCard(currentPlayer, state);
    #####:  660:    cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
    #####:  661:    if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
    #####:  662:      drawntreasure++;
        -:  663:    else{
    #####:  664:      temphand[z]=cardDrawn;
    #####:  665:      state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####:  666:      z++;
        -:  667:    }
        -:  668:  }
        -:  669:  // while(z-1>=0){
    #####:  670:  while(z-1>0){
    #####:  671:    state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####:  672:    z=z-1;
        -:  673:  }
    #####:  674:  return 0;
        -:  675:}
        -:  676:
    #####:  677:int cardEffect_feast(struct gameState *state, int choice1)
        -:  678:{
        -:  679:  int i;
        -:  680:  int x;
    #####:  681:  int currentPlayer = whoseTurn(state);
        -:  682:  int temphand[MAX_HAND];
        -:  683:
        -:  684:  //gain card with cost up to 5
        -:  685:  //Backup hand
    #####:  686:  for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  687:    temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  688:    state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  689:  }
        -:  690:  //Backup hand
        -:  691:
        -:  692:  //Update Coins for Buy
    #####:  693:  updateCoins(currentPlayer, state, 5);
    #####:  694:  x = 1;//Condition to loop on
    #####:  695:  while( x == 1) {//Buy one card
        -:  696:    // if (supplyCount(choice1, state) <= 0){
    #####:  697:    if (supplyCount(choice1, state) >= 0){    // BUG
        -:  698:      if (DEBUG)
        -:  699:        printf("None of that card left, sorry!\n");
        -:  700:
        -:  701:      if (DEBUG){
        -:  702:        printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  703:      }
        -:  704:    }
    #####:  705:    else if (state->coins < getCost(choice1)){
    #####:  706:      printf("That card is too expensive!\n");
        -:  707:
        -:  708:      if (DEBUG){
        -:  709:        printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  710:      }
        -:  711:    }
        -:  712:    else{
        -:  713:
        -:  714:      if (DEBUG){
        -:  715:        printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  716:      }
        -:  717:
    #####:  718:      gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  719:      x = 0;//No more buying cards
        -:  720:
        -:  721:      if (DEBUG){
        -:  722:        printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  723:      }
        -:  724:
        -:  725:    }
        -:  726:  }
        -:  727:
        -:  728:  //Reset Hand
    #####:  729:  for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  730:    state->hand[currentPlayer][i] = temphand[i];
    #####:  731:    temphand[i] = -1;
        -:  732:  }
        -:  733:  //Reset Hand
        -:  734:
    #####:  735:  return 0;
        -:  736:}
        -:  737:
       10:  738:int cardEffect_smithy(struct gameState *state, int handPos)
        -:  739:{
       10:  740:  int currentPlayer = whoseTurn(state);
        -:  741:  // handPos = 0;    //BUG
        -:  742:  //+3 Cards
       40:  743:  for (int i = 0; i < 3; i++)
        -:  744:  {
       30:  745:    drawCard(currentPlayer, state);
        -:  746:  }
        -:  747:
        -:  748:  //discard card from hand
       10:  749:  discardCard(handPos, currentPlayer, state, 0);
       10:  750:  return 0;
        -:  751:}
        -:  752:
    #####:  753:int cardEffect_baron(struct gameState *state, int choice1)
        -:  754:{
    #####:  755:  int currentPlayer = whoseTurn(state);
        -:  756:
    #####:  757:  state->numBuys++;//Increase buys by 1!
    #####:  758:  if (choice1 > 0)
        -:  759:  {//Boolean true or going to discard an estate
    #####:  760:    int p = 0;//Iterator for hand!
    #####:  761:    int card_not_discarded = 1;//Flag for discard set!
    #####:  762:    while(card_not_discarded)
        -:  763:    {
    #####:  764:      if (state->hand[currentPlayer][p] == estate)
        -:  765:      {//Found an estate card!
    #####:  766:        state->coins += 4;//Add 4 coins to the amount of coins
    #####:  767:        state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  768:        state->discardCount[currentPlayer]++;
    #####:  769:        for (;p < state->handCount[currentPlayer]; p++)
        -:  770:        {
    #####:  771:          state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  772:        }
    #####:  773:        state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  774:        state->handCount[currentPlayer]--;
    #####:  775:        card_not_discarded = 0;//Exit the loop
        -:  776:      }
    #####:  777:      else if (p > state->handCount[currentPlayer])
        -:  778:      {
        -:  779:        if(DEBUG)
        -:  780:        {
        -:  781:          printf("No estate cards in your hand, invalid choice\n");
        -:  782:          printf("Must gain an estate if there are any\n");
        -:  783:        }
    #####:  784:        if (supplyCount(estate, state) > 0)
        -:  785:        {
    #####:  786:          gainCard(estate, state, 0, currentPlayer);
    #####:  787:          state->supplyCount[estate]--;//Decrement estates
    #####:  788:          if (supplyCount(estate, state) == 0)
        -:  789:          {
    #####:  790:            isGameOver(state);
        -:  791:          }
        -:  792:        }
        -:  793:        // card_not_discarded = 0;//Exit the loop
        -:  794:        card_not_discarded == 0;//Exit the loop BUG
        -:  795:      }
        -:  796:
        -:  797:      else
        -:  798:      {
    #####:  799:        p++;//Next card
        -:  800:      }
        -:  801:    }
        -:  802:  }
        -:  803:
        -:  804:  else
        -:  805:  {
    #####:  806:    if (supplyCount(estate, state) > 0)
        -:  807:    {
    #####:  808:      gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  809:      state->supplyCount[estate]--;//Decrement Estates
    #####:  810:      if (supplyCount(estate, state) == 0)
        -:  811:      {
    #####:  812:        isGameOver(state);
        -:  813:      }
        -:  814:    }
        -:  815:  }
        -:  816:
    #####:  817:  return 0;
        -:  818:}
        -:  819:
    #####:  820:int cardEffect_tribute(struct gameState *state)
        -:  821:{
        -:  822:  int i;
    #####:  823:  int tributeRevealedCards[2] = {-1, -1};
    #####:  824:  int currentPlayer = whoseTurn(state);
    #####:  825:  int nextPlayer = currentPlayer + 1;
    #####:  826:  if (nextPlayer > (state->numPlayers - 1))
    #####:  827:    nextPlayer = 0;
        -:  828:
    #####:  829:  if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1)
        -:  830:  {
    #####:  831:    if (state->deckCount[nextPlayer] > 0)
        -:  832:    {
    #####:  833:      tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  834:      state->deckCount[nextPlayer]--;
        -:  835:    }
    #####:  836:  else if (state->discardCount[nextPlayer] > 0)
        -:  837:  {
    #####:  838:    tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####:  839:    state->discardCount[nextPlayer]--;
        -:  840:  }
        -:  841:  else
        -:  842:  {
        -:  843:    //No Card to Reveal
        -:  844:    if (DEBUG)
        -:  845:    {
        -:  846:      printf("No cards to reveal\n");
        -:  847:    }
        -:  848:  }
        -:  849:  }
        -:  850:
        -:  851:  else
        -:  852:  {
    #####:  853:    if (state->deckCount[nextPlayer] == 0)
        -:  854:    {
    #####:  855:      for (i = 0; i < state->discardCount[nextPlayer]; i++)
        -:  856:      {
    #####:  857:        state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####:  858:        state->deckCount[nextPlayer]++;
    #####:  859:        state->discard[nextPlayer][i] = -1;
    #####:  860:        state->discardCount[nextPlayer]--;
        -:  861:      }
        -:  862:
    #####:  863:      shuffle(nextPlayer,state);//Shuffle the deck
        -:  864:    }
    #####:  865:    tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  866:    state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  867:    state->deckCount[nextPlayer]--;
    #####:  868:    tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  869:    state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  870:    state->deckCount[nextPlayer]--;
        -:  871:  }
        -:  872:
    #####:  873:  if (tributeRevealedCards[0] == tributeRevealedCards[1])
        -:  874:  {//If we have a duplicate card, just drop one
    #####:  875:    state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####:  876:    state->playedCardCount++;
    #####:  877:    tributeRevealedCards[1] = -1;
        -:  878:  }
        -:  879:
    #####:  880:  for (i = 0; i <= 2; i ++)
        -:  881:  {
    #####:  882:    if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold)
        -:  883:    {//Treasure cards
    #####:  884:      state->coins += 2;
        -:  885:    }
        -:  886:
    #####:  887:    else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall)
        -:  888:    {//Victory Card Found
    #####:  889:      drawCard(currentPlayer, state);
    #####:  890:      drawCard(currentPlayer, state);
        -:  891:    }
        -:  892:    else
        -:  893:    {//Action Card
    #####:  894:      state->numActions = state->numActions + 2;
        -:  895:    }
        -:  896:  }
        -:  897:
    #####:  898:  return 0;
        -:  899:}
        -:  900:
       10:  901:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  902:{
        -:  903:  int i;
        -:  904:  int j;
        -:  905:  int k;
        -:  906:  int x;
        -:  907:  int index;
       10:  908:  int currentPlayer = whoseTurn(state);
       10:  909:  int nextPlayer = currentPlayer + 1;
        -:  910:
       10:  911:  int tributeRevealedCards[2] = {-1, -1};
        -:  912:  int temphand[MAX_HAND];// moved above the if statement
       10:  913:  int drawntreasure=0;
        -:  914:  int cardDrawn;
       10:  915:  int z = 0;// this is the counter for the temp hand
       10:  916:  if (nextPlayer > (state->numPlayers - 1)){
    #####:  917:    nextPlayer = 0;
        -:  918:  }
        -:  919:
        -:  920:
        -:  921:  //uses switch to select card and perform actions
       10:  922:  switch( card )
        -:  923:    {
    #####:  924:      case adventurer:
    #####:  925:        return cardEffect_adventurer(state);
        -:  926:
    #####:  927:      case council_room:
        -:  928:            //+4 Cards
    #####:  929:        for (i = 0; i < 4; i++)
        -:  930:      	{
    #####:  931:      	  drawCard(currentPlayer, state);
        -:  932:      	}
        -:  933:
        -:  934:        //+1 Buy
    #####:  935:        state->numBuys++;
        -:  936:
        -:  937:        //Each other player draws a card
    #####:  938:        for (i = 0; i < state->numPlayers; i++)
        -:  939:      	{
    #####:  940:      	  if ( i != currentPlayer )
        -:  941:      	    {
    #####:  942:      	      drawCard(i, state);
        -:  943:      	    }
        -:  944:      	}
        -:  945:
        -:  946:        //put played card in played card pile
    #####:  947:        discardCard(handPos, currentPlayer, state, 0);
        -:  948:
    #####:  949:        return 0;
        -:  950:
    #####:  951:      case feast:
    #####:  952:        return cardEffect_feast(state, choice1);
        -:  953:
    #####:  954:      case gardens:
    #####:  955:        return -1;
        -:  956:
    #####:  957:      case mine:
    #####:  958:        j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  959:
    #####:  960:        if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  961:      	{
    #####:  962:      	  return -1;
        -:  963:      	}
        -:  964:
    #####:  965:        if (choice2 > treasure_map || choice2 < curse)
        -:  966:      	{
    #####:  967:      	  return -1;
        -:  968:      	}
        -:  969:
    #####:  970:        if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  971:      	{
    #####:  972:      	  return -1;
        -:  973:      	}
        -:  974:
    #####:  975:        gainCard(choice2, state, 2, currentPlayer);
        -:  976:
        -:  977:        //discard card from hand
    #####:  978:        discardCard(handPos, currentPlayer, state, 0);
        -:  979:
        -:  980:        //discard trashed card
    #####:  981:        for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  982:      	{
    #####:  983:      	  if (state->hand[currentPlayer][i] == j)
        -:  984:    	    {
    #####:  985:    	      discardCard(i, currentPlayer, state, 0);
    #####:  986:    	      break;
        -:  987:    	    }
        -:  988:      	}
        -:  989:
    #####:  990:        return 0;
        -:  991:
    #####:  992:      case remodel:
    #####:  993:        j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  994:
    #####:  995:        if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  996:      	{
    #####:  997:      	  return -1;
        -:  998:      	}
        -:  999:
    #####: 1000:        gainCard(choice2, state, 0, currentPlayer);
        -: 1001:
        -: 1002:        //discard card from hand
    #####: 1003:        discardCard(handPos, currentPlayer, state, 0);
        -: 1004:
        -: 1005:        //discard trashed card
    #####: 1006:        for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1007:      	{
    #####: 1008:      	  if (state->hand[currentPlayer][i] == j)
        -: 1009:      	    {
    #####: 1010:      	      discardCard(i, currentPlayer, state, 0);
    #####: 1011:      	      break;
        -: 1012:      	    }
        -: 1013:      	}
        -: 1014:
        -: 1015:
    #####: 1016:        return 0;
        -: 1017:
       10: 1018:      case smithy:
       10: 1019:        return cardEffect_smithy(state, handPos);
        -: 1020:
    #####: 1021:      case village:
        -: 1022:        //+1 Card
    #####: 1023:        drawCard(currentPlayer, state);
        -: 1024:
        -: 1025:        //+2 Actions
    #####: 1026:        state->numActions = state->numActions + 2;
        -: 1027:
        -: 1028:        //discard played card from hand
    #####: 1029:        discardCard(handPos, currentPlayer, state, 0);
    #####: 1030:        return 0;
        -: 1031:
    #####: 1032:      case baron:
    #####: 1033:        return cardEffect_baron(state, choice1);
        -: 1034:
    #####: 1035:      case great_hall:
        -: 1036:        //+1 Card
    #####: 1037:        drawCard(currentPlayer, state);
        -: 1038:
        -: 1039:        //+1 Actions
    #####: 1040:        state->numActions++;
        -: 1041:
        -: 1042:        //discard card from hand
    #####: 1043:        discardCard(handPos, currentPlayer, state, 0);
    #####: 1044:        return 0;
        -: 1045:
    #####: 1046:      case minion:
        -: 1047:        //+1 action
    #####: 1048:        state->numActions++;
        -: 1049:
        -: 1050:        //discard card from hand
    #####: 1051:        discardCard(handPos, currentPlayer, state, 0);
        -: 1052:
    #####: 1053:        if (choice1)		//+2 coins
        -: 1054:      	{
    #####: 1055:      	  state->coins = state->coins + 2;
        -: 1056:      	}
        -: 1057:
    #####: 1058:        else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -: 1059:      	{
        -: 1060:      	  //discard hand
    #####: 1061:      	  while(numHandCards(state) > 0)
        -: 1062:    	    {
    #####: 1063:    	      discardCard(handPos, currentPlayer, state, 0);
        -: 1064:    	    }
        -: 1065:
        -: 1066:      	  //draw 4
    #####: 1067:      	  for (i = 0; i < 4; i++)
        -: 1068:    	    {
    #####: 1069:    	      drawCard(currentPlayer, state);
        -: 1070:    	    }
        -: 1071:
        -: 1072:      	  //other players discard hand and redraw if hand size > 4
    #####: 1073:      	  for (i = 0; i < state->numPlayers; i++)
        -: 1074:    	    {
    #####: 1075:    	      if (i != currentPlayer)
        -: 1076:        		{
    #####: 1077:        		  if ( state->handCount[i] > 4 )
        -: 1078:      		    {
        -: 1079:      		      //discard hand
    #####: 1080:      		      while( state->handCount[i] > 0 )
        -: 1081:          			{
    #####: 1082:          			  discardCard(handPos, i, state, 0);
        -: 1083:          			}
        -: 1084:
        -: 1085:      		      //draw 4
    #####: 1086:      		      for (j = 0; j < 4; j++)
        -: 1087:          			{
    #####: 1088:          			  drawCard(i, state);
        -: 1089:          			}
        -: 1090:      		    }
        -: 1091:        		}
        -: 1092:    	    }
        -: 1093:
        -: 1094:      	}
    #####: 1095:        return 0;
        -: 1096:
    #####: 1097:      case steward:
    #####: 1098:        if (choice1 == 1)
        -: 1099:      	{
        -: 1100:      	  //+2 cards
    #####: 1101:      	  drawCard(currentPlayer, state);
    #####: 1102:      	  drawCard(currentPlayer, state);
        -: 1103:      	}
    #####: 1104:        else if (choice1 == 2)
        -: 1105:      	{
        -: 1106:      	  //+2 coins
    #####: 1107:      	  state->coins = state->coins + 2;
        -: 1108:      	}
        -: 1109:        else
        -: 1110:      	{
        -: 1111:      	  //trash 2 cards in hand
    #####: 1112:      	  discardCard(choice2, currentPlayer, state, 1);
    #####: 1113:      	  discardCard(choice3, currentPlayer, state, 1);
        -: 1114:      	}
        -: 1115:
        -: 1116:        //discard card from hand
    #####: 1117:        discardCard(handPos, currentPlayer, state, 0);
    #####: 1118:        return 0;
        -: 1119:
    #####: 1120:      case tribute:
    #####: 1121:        return cardEffect_tribute(state);
        -: 1122:
    #####: 1123:    case ambassador:
    #####: 1124:      j = 0;		//used to check if player has enough cards to discard
        -: 1125:
    #####: 1126:      if (choice2 > 2 || choice2 < 0)
        -: 1127:	{
    #####: 1128:	  return -1;
        -: 1129:	}
        -: 1130:
    #####: 1131:      if (choice1 == handPos)
        -: 1132:	{
    #####: 1133:	  return -1;
        -: 1134:	}
        -: 1135:
    #####: 1136:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1137:	{
    #####: 1138:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1139:	    {
    #####: 1140:	      j++;
        -: 1141:	    }
        -: 1142:	}
    #####: 1143:      if (j < choice2)
        -: 1144:	{
    #####: 1145:	  return -1;
        -: 1146:	}
        -: 1147:
        -: 1148:      if (DEBUG)
        -: 1149:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1150:
        -: 1151:      //increase supply count for choosen card by amount being discarded
    #####: 1152:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1153:
        -: 1154:      //each other player gains a copy of revealed card
    #####: 1155:      for (i = 0; i < state->numPlayers; i++)
        -: 1156:	{
    #####: 1157:	  if (i != currentPlayer)
        -: 1158:	    {
    #####: 1159:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1160:	    }
        -: 1161:	}
        -: 1162:
        -: 1163:      //discard played card from hand
    #####: 1164:      discardCard(handPos, currentPlayer, state, 0);
        -: 1165:
        -: 1166:      //trash copies of cards returned to supply
    #####: 1167:      for (j = 0; j < choice2; j++)
        -: 1168:	{
    #####: 1169:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1170:	    {
    #####: 1171:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1172:		{
    #####: 1173:		  discardCard(i, currentPlayer, state, 1);
    #####: 1174:		  break;
        -: 1175:		}
        -: 1176:	    }
        -: 1177:	}
        -: 1178:
    #####: 1179:      return 0;
        -: 1180:
    #####: 1181:    case cutpurse:
        -: 1182:
    #####: 1183:      updateCoins(currentPlayer, state, 2);
    #####: 1184:      for (i = 0; i < state->numPlayers; i++)
        -: 1185:	{
    #####: 1186:	  if (i != currentPlayer)
        -: 1187:	    {
    #####: 1188:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1189:		{
    #####: 1190:		  if (state->hand[i][j] == copper)
        -: 1191:		    {
    #####: 1192:		      discardCard(j, i, state, 0);
    #####: 1193:		      break;
        -: 1194:		    }
    #####: 1195:		  if (j == state->handCount[i])
        -: 1196:		    {
    #####: 1197:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1198:			{
        -: 1199:			  if (DEBUG)
        -: 1200:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1201:			}
    #####: 1202:		      break;
        -: 1203:		    }
        -: 1204:		}
        -: 1205:
        -: 1206:	    }
        -: 1207:
        -: 1208:	}
        -: 1209:
        -: 1210:      //discard played card from hand
    #####: 1211:      discardCard(handPos, currentPlayer, state, 0);
        -: 1212:
    #####: 1213:      return 0;
        -: 1214:
        -: 1215:
    #####: 1216:    case embargo:
        -: 1217:      //+2 Coins
    #####: 1218:      state->coins = state->coins + 2;
        -: 1219:
        -: 1220:      //see if selected pile is in play
    #####: 1221:      if ( state->supplyCount[choice1] == -1 )
        -: 1222:	{
    #####: 1223:	  return -1;
        -: 1224:	}
        -: 1225:
        -: 1226:      //add embargo token to selected supply pile
    #####: 1227:      state->embargoTokens[choice1]++;
        -: 1228:
        -: 1229:      //trash card
    #####: 1230:      discardCard(handPos, currentPlayer, state, 1);
    #####: 1231:      return 0;
        -: 1232:
    #####: 1233:    case outpost:
        -: 1234:      //set outpost flag
    #####: 1235:      state->outpostPlayed++;
        -: 1236:
        -: 1237:      //discard card
    #####: 1238:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1239:      return 0;
        -: 1240:
    #####: 1241:    case salvager:
        -: 1242:      //+1 buy
    #####: 1243:      state->numBuys++;
        -: 1244:
    #####: 1245:      if (choice1)
        -: 1246:	{
        -: 1247:	  //gain coins equal to trashed card
    #####: 1248:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1249:	  //trash card
    #####: 1250:	  discardCard(choice1, currentPlayer, state, 1);
        -: 1251:	}
        -: 1252:
        -: 1253:      //discard card
    #####: 1254:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1255:      return 0;
        -: 1256:
    #####: 1257:    case sea_hag:
    #####: 1258:      for (i = 0; i < state->numPlayers; i++){
    #####: 1259:	if (i != currentPlayer){
    #####: 1260:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1261:	  state->discardCount[i]++;
    #####: 1262:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1263:	}
        -: 1264:      }
    #####: 1265:      return 0;
        -: 1266:
    #####: 1267:    case treasure_map:
        -: 1268:      //search hand for another treasure_map
    #####: 1269:      index = -1;
    #####: 1270:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1271:	{
    #####: 1272:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1273:	    {
    #####: 1274:	      index = i;
    #####: 1275:	      break;
        -: 1276:	    }
        -: 1277:	}
    #####: 1278:      if (index > -1)
        -: 1279:	{
        -: 1280:	  //trash both treasure cards
    #####: 1281:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1282:	  discardCard(index, currentPlayer, state, 1);
        -: 1283:
        -: 1284:	  //gain 4 Gold cards
    #####: 1285:	  for (i = 0; i < 4; i++)
        -: 1286:	    {
    #####: 1287:	      gainCard(gold, state, 1, currentPlayer);
        -: 1288:	    }
        -: 1289:
        -: 1290:	  //return success
    #####: 1291:	  return 1;
        -: 1292:	}
        -: 1293:
        -: 1294:      //no second treasure_map found in hand
    #####: 1295:      return -1;
        -: 1296:    }
        -: 1297:
    #####: 1298:  return -1;
        -: 1299:}
        -: 1300:
       10: 1301:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1302:{
        -: 1303:
        -: 1304:  //if card is not trashed, added to Played pile
       10: 1305:  if (trashFlag < 1)
        -: 1306:    {
        -: 1307:      //add card to played pile
       10: 1308:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos];
       10: 1309:      state->playedCardCount++;
        -: 1310:    }
        -: 1311:
        -: 1312:  //set played card to -1
       10: 1313:  state->hand[currentPlayer][handPos] = -1;
        -: 1314:
        -: 1315:  //remove card from player's hand
       10: 1316:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1317:    {
        -: 1318:      //reduce number of cards in hand
    #####: 1319:      state->handCount[currentPlayer]--;
        -: 1320:    }
       10: 1321:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1322:    {
        -: 1323:      //reduce number of cards in hand
    #####: 1324:      state->handCount[currentPlayer]--;
        -: 1325:    }
        -: 1326:  else
        -: 1327:    {
        -: 1328:      //replace discarded card with last card in hand
       10: 1329:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1330:      //set last card to -1
       10: 1331:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1332:      //reduce number of cards in hand
       10: 1333:      state->handCount[currentPlayer]--;
        -: 1334:    }
        -: 1335:
       10: 1336:  return 0;
        -: 1337:}
        -: 1338:
    #####: 1339:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1340:{
        -: 1341:  //Note: supplyPos is enum of choosen card
        -: 1342:
        -: 1343:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1344:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1345:    {
    #####: 1346:      return -1;
        -: 1347:    }
        -: 1348:
        -: 1349:  //added card for [whoseTurn] current player:
        -: 1350:  // toFlag = 0 : add to discard
        -: 1351:  // toFlag = 1 : add to deck
        -: 1352:  // toFlag = 2 : add to hand
        -: 1353:
    #####: 1354:  if (toFlag == 1)
        -: 1355:    {
    #####: 1356:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1357:      state->deckCount[player]++;
        -: 1358:    }
    #####: 1359:  else if (toFlag == 2)
        -: 1360:    {
    #####: 1361:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1362:      state->handCount[player]++;
        -: 1363:    }
        -: 1364:  else
        -: 1365:    {
    #####: 1366:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1367:      state->discardCount[player]++;
        -: 1368:    }
        -: 1369:
        -: 1370:  //decrease number in supply pile
    #####: 1371:  state->supplyCount[supplyPos]--;
        -: 1372:
    #####: 1373:  return 0;
        -: 1374:}
        -: 1375:
       14: 1376:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1377:{
        -: 1378:  int i;
        -: 1379:
        -: 1380:  //reset coin count
       14: 1381:  state->coins = 0;
        -: 1382:
        -: 1383:  //add coins for each Treasure card in player's hand
       84: 1384:  for (i = 0; i < state->handCount[player]; i++)
        -: 1385:    {
       70: 1386:      if (state->hand[player][i] == copper)
        -: 1387:	{
       56: 1388:	  state->coins += 1;
        -: 1389:	}
       14: 1390:      else if (state->hand[player][i] == silver)
        -: 1391:	{
    #####: 1392:	  state->coins += 2;
        -: 1393:	}
       14: 1394:      else if (state->hand[player][i] == gold)
        -: 1395:	{
    #####: 1396:	  state->coins += 3;
        -: 1397:	}
        -: 1398:    }
        -: 1399:
        -: 1400:  //add bonus
       14: 1401:  state->coins += bonus;
        -: 1402:
       14: 1403:  return 0;
        -: 1404:}
        -: 1405:
        -: 1406:
        -: 1407://end of dominion.c
